#imports
import pygame
import math as m
import pygame.freetype
from pygame.draw import *
from random import randint
#initialisations
pygame.init()
pygame.font.init()
#time
clock = pygame.time.Clock()
#surfaces
screen = pygame.display.set_mode((1200, 600))
#fonts
fonte_0 = pygame.freetype.Font("lato.ttf", 70)
fonte_1 = pygame.freetype.Font("lato.ttf", 30)
#colors
color = [0]*6
color[0] = (255, 0, 0) # red
color[1] = (0, 255, 0) # green 
color[2] = (0, 0, 255) # blue
color[3] = (255, 255, 0) # yellow
color[4] = (0, 255, 255) # cian
color[5] = (255, 0, 255) # purple
black = (0, 0, 0)


def make_circle():
    rad = randint(10, 50)
    x = randint(50,1150)
    y = randint(50,550)
    v = randint(1,5)
    a = randint(0,360)
    a = a*m.pi/180
    col = randint(0, 5)
    ch = [rad, x, y, v, a, col]
    return ch
def for_circles(n):
    i = 0
    ch = [0]*n
    while i < n:
        ch[i] = make_circle()
        i += 1
    return ch


def turn_circles(i, a):
    if a[i][1] > 1200 - a[i][0]:
        a[i][4] += m.pi - 2*a[i][4]
    elif a[i][1] < a[i][0]:
        a[i][4] += m.pi - 2*a[i][4]
    if a[i][2] > 600 - a[i][0]:
        a[i][4] -= 2*a[i][4]
    elif a[i][2] < a[i][0]:
        a[i][4] -= 2*a[i][4]

def change_circles(n, a):
    k = 0
    while k < n:
        turn_circles(k, a)
        a[k][1] += a[k][3]*m.cos(a[k][4])
        a[k][2] += a[k][3]*m.sin(a[k][4])
        k += 1
def change_squares(n, a):
    k = 0
    while k < n:
        turn_circles(k, a)
        a[k][1] += a[k][3]*m.cos(a[k][4])
        a[k][2] += a[k][3]*m.sin(a[k][4])
        a[k][3] += randint(-1,1)
        a[k][4] += randint(-1,1)*m.pi/12
        if a[k][3] >= 5:
            a[k][3] = 5
        elif a[k][3] <= -5:
            a[k][3] = -5
        k += 1
def print_circles(n, a):
    j = 0
    while j < n:
        circle(screen, color[a[j][5]], (a[j][1], a[j][2]), a[j][0])
        j += 1
def print_squares(n, a):
    j = 0
    while j < n:
        rect(screen, color[a[j][5]], (a[j][1] - a[j][0], a[j][2] - a[j][0], 2*a[j][0], 2*a[j][0]))
        j += 1

def for_touch(n, f, a, b, score, finished):
    for event in pygame.event.get():
        if event.type == pygame.MOUSEBUTTONDOWN:
            i_0 = 0
            while i_0 < n:
                if (event.pos[0] - a[i_0][1])**2 + (event.pos[1] - a[i_0][2])**2 <= a[i_0][0]**2:
                    a[i_0] = make_circle()
                    score += 1
                i_0 += 1
        if event.type == pygame.MOUSEBUTTONDOWN:
            i_1 = 0
            while i_1 < f:
                if (event.pos[0] - b[i_1][1])**2 + (event.pos[1] - b[i_1][2])**2 <= b[i_1][0]**2:
                    b[i_1] = make_circle()
                    score += 2
                i_1 += 1
        elif event.type == pygame.QUIT:
            finished = True
    return score, finished
    
def make_squares(f):
    rad = randint(10, 50)
    x = randint(50,1150)
    y = randint(50,550)
    v = randint(1,5)
    a = randint(0,360)
    a = a*m.pi/180
    col = randint(0, 5)
    ch = [rad, x, y, v, a, col]
    return ch
def for_squares(n):
    i = 0
    ch = [0]*n
    while i < n:
        ch[i] = make_circle()
        i += 1
    return ch
def welcome():
    fonte_0.render_to(screen, (300, 100), "Welcome to the game!", (255,255,240))
    fonte_1.render_to(screen, (10, 300), "Please, type your name:", (255,255,240))
    rect(screen, (255,255,240), (320, 285, 300, 40), 1)

def file():
    inp = open('players.txt', 'a')
    global name
    text = f"{name}: {score_0}"
    inp.write(text)
    inp.close

#main body
def attemp ():
    score = 0
    finished = False
    FPS = 30
    n = 4
    f = 2
    a = for_circles(n)
    b = for_squares(f)
    while not finished:
        clock.tick(FPS)
        change_circles(n, a)
        print_circles(n, a)

        change_squares(f, b)
        print_squares(f, b)
        arr = for_touch(n, f, a, b, score, finished)
        score = arr[0]
        finished = arr[1]

        fonte_1.render_to(screen, (10, 10), f"Your score: {score}", (255,255,240))
   
        pygame.display.update()
        screen.fill(black)
    file()
    return score


finished_0 = False
score_0 = 0
line = ''
while not finished_0:
    
    welcome()
    clock.tick(30)
    
    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_q:
                line += 'q'
            elif event.key == pygame.K_w:
                line += 'w'
            elif event.key == pygame.K_e:
                line += 'e'
            elif event.key == pygame.K_r:
                line += 'r'
            elif event.key == pygame.K_t:
                line += 't'
            elif event.key == pygame.K_y:
                line += 'y'
            elif event.key == pygame.K_u:
                line += 'u'
            elif event.key == pygame.K_i:
                line += 'i'
            elif event.key == pygame.K_o:
                line += 'o'
            elif event.key == pygame.K_p:
                line += 'p'
            elif event.key == pygame.K_a:
                line += 'a'
            elif event.key == pygame.K_s:
                line += 's'
            elif event.key == pygame.K_d:
                line += 'd'
            elif event.key == pygame.K_f:
                line += 'f'
            elif event.key == pygame.K_g:
                line += 'g'
            elif event.key == pygame.K_h:
                line += 'h'
            elif event.key == pygame.K_j:
                line += 'j'
            elif event.key == pygame.K_k:
                line += 'k'
            elif event.key == pygame.K_l:
                line += 'l'
            elif event.key == pygame.K_z:
                line += 'z'
            elif event.key == pygame.K_x:
                line += 'x'
            elif event.key == pygame.K_c:
                line += 'c'
            elif event.key == pygame.K_v:
                line += 'v'
            elif event.key == pygame.K_b:
                line += 'b'
            elif event.key == pygame.K_n:
                line += 'n'
            elif event.key == pygame.K_m:
                line += 'm'
            elif event.key == pygame.K_SPACE:
                line += ' '
            elif event.key == pygame.K_BACKSPACE:
                line = line[0:-1]
            if event.key == pygame.K_RETURN:
                name = line
                score_0 = attemp()
            if event.key == pygame.K_ESCAPE:
                finished_0 = True
    fonte_1.render_to(screen, (325, 300), line, (255,255,240))
    pygame.display.update()
    screen.fill(black)

pygame.quit()
